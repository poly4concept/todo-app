{"version":3,"sources":["Components/form.js","Components/todoItem.js","Components/todos.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","state","title","onChange","e","setState","target","name","value","onSubmit","preventDefault","focus","inputRef","current","React","createRef","clearRef","this","type","placeholder","className","ref","onClick","Component","TodoItem","taskCompleted","textDecoration","todo","completed","buttonChecked","backgroundColor","id","style","markCompleted","bind","delTodo","Todo","todos","map","App","nanoid","count","filter","newCount","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","tasks","document","getElementById"],"mappings":"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","file":"static/js/main.17554da5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = React.createRef()\r\n        this.clearRef = React.createRef()\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.Form(this.state.title)\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    focus = () => {\r\n        this.inputRef.current.focus()\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.onSubmit}> \r\n                <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Add a task\"\r\n                    className=\"addtask\"\r\n                    value={this.state.value}\r\n                    onChange={this.onChange} \r\n                    ref={this.inputRef}\r\n                >\r\n                </input>\r\n                <i className=\"fas fa-plus\" onClick={this.focus}></i>\r\n                <input type=\"submit\" value=\"submit\" className=\"submitBtn\"></input>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n    taskCompleted = () => {\r\n        return {\r\n            textDecoration : this.props.todo.completed ? 'line-through' :'none'\r\n        }\r\n    }\r\n    buttonChecked = () => {\r\n        return{\r\n            backgroundColor : this.props.todo.completed ? '#ea4689' :'hsl(218, 28%, 13%)'\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div className=\"todocontainer\">\r\n                <div className=\"todobox\">\r\n                    <span className=\"checkbutton\" style={this.buttonChecked()} onClick={this.props.markCompleted.bind(this, id)}></span>\r\n                    <p style={this.taskCompleted()}>\r\n                        { title }\r\n                    </p>\r\n                    <i className=\"fas fa-trash-alt\" onClick={this.props.delTodo.bind(this, id)} ></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//proptypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from \"./todoItem\";\r\nimport PropTypes from 'prop-types';\r\nclass Todo extends Component {\r\n    render(){\r\n        return this.props.todos.map((todo)=>(\r\n           <TodoItem key={todo.id} todo={todo} markCompleted={this.props.markCompleted} delTodo={this.props.delTodo}/>\r\n        ))\r\n    }\r\n}\r\n\r\n//proptypes\r\nTodo.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport Form from \"./Components/form\";\r\nimport Todo from \"./Components/todos\";\r\nimport { nanoid } from \"nanoid\" ;\r\nimport './index.css';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        todos: [\r\n            {\r\n                id: nanoid(),\r\n                title: 'Take out trash',\r\n                completed: false\r\n            },\r\n            {\r\n                id: nanoid(),\r\n                title: 'Listening to mufti',\r\n                completed: false\r\n            },\r\n            {\r\n                id: nanoid(),\r\n                title: 'Coding',\r\n                completed: true\r\n            },\r\n        ],\r\n        count: 3\r\n    }\r\n    \r\n\r\n//HeadingText\r\n    \r\n//Toggle Complete\r\n    markCompleted = (id) => {\r\n        this.setState({todos: this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo;\r\n        }) })\r\n    }\r\n//Delete Todo Items\r\n    delTodo = (id) => {\r\n        this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] })\r\n        let newCount = this.state.count - 1\r\n        this.setState({\r\n        count: newCount\r\n    })\r\n    }\r\n//Add Todo Items\r\n    Form = (title) => {\r\n        const newTodo = {\r\n            id: nanoid(),\r\n            title: title,\r\n            completed: false\r\n        }\r\n        this.setState({ todos: [...this.state.todos, newTodo] });\r\n        let newCount = this.state.count + 1\r\n        this.setState({\r\n        count: newCount\r\n    })\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"todoapp\">\r\n                <Form Form={this.Form}/>\r\n                <h3>Tasks - {this.state.count}</h3>\r\n                <Todo  todos={this.state.todos} markCompleted={this.markCompleted} delTodo={this.delTodo} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false }\n  ];\n\n  ReactDOM.render(<App tasks={DATA} />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}